//1. На вход поступает массив, вывести массив, удалив неуникальные значения.
console.log(`1. На вход поступает массив, вывести массив, удалив неуникальные значения.`);
const array1 = [5,-2,3,4,5,6,-2,5,5,0];
console.log(`Входные данные:`, array1);
console.log(`Ответ:`, array1.filter((value, index) => {
    return array1.indexOf(value) === index;
}));

//2. На вход поступает массив, реверсировать значения (подобно методу reverse) метод reverse не использовать.
console.log(`2. На вход поступает массив, реверсировать значения (подобно методу reverse) метод reverse не использовать.`);
const array2 = [5,-2,3,4,5,6,-2,5,5,0];
console.log(`Входные данные:`, array2);
console.log(`Ответ:`, array2.map((value, index) => {
    return array2[array2.length - index - 1];
}));

//3. На вход поступает массив, содержащий массивы, в которых хранится два элемента. Преобразовать массив в объект, где ключами являются нулевой индекс вложенныхых массивов,
//    а значениями являются элементы с индексом один.
console.log(`3. На вход поступает массив, содержащий массивы, в которых хранится два элемента. Преобразовать массив в объект, где ключами являются нулевой индекс вложенныхых массивов, а значениями являются элементы с индексом один.`);
const array3 = [ [5, 0], ["6", 1], ["test", 2] ];
console.log(`Входные данные:`, array3);
console.log(`Ответ:`, Object.fromEntries(array3));


//4. На вход поступает объект, вывести сумму числовых свойств объекта.
console.log(`4. На вход поступает объект, вывести сумму числовых свойств объекта.`);
const obj4 = { key1: 1, key2: "key2", key3: 3, key4: true, key5: function () {}, key6: 99 };
console.log(`Входные данные:`, obj4);
let count4 = 0;
for (let key in obj4) {
    if (typeof obj4[key] == 'number') {
        count4 += obj4[key];
    }
}
console.log(`Ответ:`, count4);


//5. На вход поступает массив с числами, вывести среднее арифметическое элементов массива.
console.log(`5. На вход поступает массив с числами, вывести среднее арифметическое элементов массива.`);
const array5 = [5,-2,3,4,5,6,-2,5,5,0];
console.log(`Входные данные:`, array5);
console.log(`Ответ:`, (array5.reduce((acc, value) => acc + value, 0)) / array5.length);

//6. Создать функцию-конструктор для объекта "калькулятор", объект должен иметь поле, хранящее текущее значение и методы сложения, вычитания,
//умножения и деления, принимающие число и манипулирующий свойством значения в соответствии с назначением метода, а так же функцию, сбрасывающую значение в ноль.
console.log(`6. Создать функцию-конструктор для объекта "калькулятор", объект должен иметь поле, хранящее текущее значение и методы сложения, вычитания,
умножения и деления, принимающие число и манипулирующий свойством значения в соответствии с назначением метода, а так же функцию, сбрасывающую значение в ноль.`);
function Calc(number) {
    this.number = number;
    this.add = (num) => this.number += num;
    this.sub = (num) => this.number -= num;
    this.mult = (num) => this.number *= num;
    this.div = (num) => this.number /= num;
    this.clear = () => this.number = 0;
    this.read = () => { return this.number; }
}
const add = 4;
const sub = 3;
const mult = 2;
const div = 8;
const calc = new Calc(5);
console.log(`Инициализация: ${calc.read()}`)
calc.add(add);
console.log(`Добавили ${add} = ${calc.read()}`)
calc.sub(sub);
console.log(`Отняли ${sub} = ${calc.read()}`)
calc.mult(mult);
console.log(`Умножили на ${mult} = ${calc.read()}`)
calc.div(div);
console.log(`Разделили на ${div} = ${calc.read()}`)
calc.clear();
console.log(`Сброс: ${calc.read()}`)

/*
//1)
const q1 = prompt(`1. Написать скрипт, предлагающий пользователю ввести две строки через запятую. 
Вывести сообщение true, если вторая строка содержится в первый, в противном случае false, регистр при проверке не учитывать
Пример ввода: in God we trust...,Trust`);
const arr1 = q1.split(",");
alert(arr1[0].toLowerCase().includes(arr1[1].toLowerCase()));

//2)
const q2 = prompt(`2. Пользователь вводит строку, затем число через запятую (кол-во символов). 
Функция усекает строку до кол-ва символов и добавляет многоточие
Пример ввода: in God we trust...,6`);
const arr2 = q2.split(",");
alert(arr2[0].slice(0,arr2[1]).concat("..."));

//3)
const q3 = prompt(`3. Написать функцию, преобразующее строку с датой и временем формата '12/02/2021 12-00' 
в строку формата 12.02.2021 12:00, используя регулярные выражения
Пример ввода: 12/02/2021 12-00`);
alert(q3.replace(/[//]/g, ".").replace(/-/g, ":"));

//4)
const q4 = prompt(`4. Написать функцию, валидирующую ФИО из кирилличиских символов 
(считать, что отчество может оканчиваться только на "вна" или "вич" или может отсутствовать)
Пример ввода: Гейтс Билл Вильямович`);
const regexp4 = /^[а-яА-я]+ [а-яА-я]+( [а-яА-я]*(вна|вич))?$/;
alert(regexp4.test(q4));

//5)
const q5 = prompt(`5. На вход дана строка в PamalCase, преобразовать строку в snake_case
Пример ввода: CamelCaseS`);
alert(q5.replace(/[A-ZА-Я]/g, (str) => "_".concat(str)).toLowerCase().slice(1));

//6)
const q6 = prompt(`6. На вход даётся многострочная строка, найти и вернуть через alert все html комментарии
Пример ввода:
<!-- комментарий 1 -->
html text 1
<!-- Много
строчный
комментарий -->
...продолжаем html текст
...снова html
<!-- комментарий 2 -->
(вставить текст из файла)
`);
const regexp6 = /(?<=(\<!--)).*?(?=(--\>))/gms;
alert(q6.match(regexp6));

//7)
const q7 = prompt(`7. На вход дана строка, вернуть через alert все числа (десятичные разделяются сиволом ".")
Пример ввода: call+8(800)900.9-10.-0.01`);
const regexp7 = /[\d]*[\.]?[\d]+/g;
alert(q7.match(regexp7));

//8)
const regexp8=/^[a-zA-Z0-9]{4}-?[a-zA-Z0-9]{4}-?[a-zA-Z0-9]{4}-?[a-zA-Z0-9]{4}$/g;
do {
    let q8 = prompt(`8. Валидация введённого значения. Вводится идентификатор документа. Идентификатор должен состоять из четырёх частей по четыре символа,разделённых или не разделённых знаком "-". 
    Допускаются только символы латинского алфавита и числа. Вывести через alert "ведётся поиск", при соответствии введённого значения, или "неверный идентификатор", при несоответствии. 
    При несоответствии снова вывести форму для ввода строки.
    Пример ввода: 1234-FFF89-as90-90hg`);
    if (regexp8.test(q8)) {
        alert("ведётся поиск");
        break;
    } else {
        alert("неверный идентификатор");
    }
} while (true);
*/